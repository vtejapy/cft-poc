AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC infrastructure with public and private subnets'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, stg, prod]
    Description: Environment name

  Region:
    Type: String
    Default: us-east-1
    Description: AWS region for deployment

  VpcCidr:
    Type: String
    Default: 10.113.0.0/16
    Description: CIDR block for the VPC

  Client:
    Type: String
    Default: gen-client5
    Description: Client name

  CostCenter:
    Type: String
    Default: '1003'
    Description: Cost center for billing tags

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${Client}-vpc-${Region}-${Environment}'
        - Key: environment
          Value: !Ref Environment
        - Key: costCenter
          Value: !Ref CostCenter
        - Key: appService
          Value: !Ref Client
        - Key: deployedBy
          Value: cloudformation

  # # Internet Gateway
  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-vpc-${Region}-${Environment}-igw'

  # AttachGateway:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     VpcId: !Ref VPC
  #     InternetGatewayId: !Ref InternetGateway

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [10, !Cidr [!Ref VpcCidr, 256, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Client}-vpc-${Region}-${Environment}-private-subnet-1'
        - Key: environment
          Value: !Ref Environment
        - Key: costCenter
          Value: !Ref CostCenter
        - Key: appService
          Value: !Ref Client
        - Key: deployedBy
          Value: cloudformation

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [11, !Cidr [!Ref VpcCidr, 256, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Client}-vpc-${Region}-${Environment}-private-subnet-2'
        - Key: environment
          Value: !Ref Environment
        - Key: costCenter
          Value: !Ref CostCenter
        - Key: appService
          Value: !Ref Client
        - Key: deployedBy
          Value: cloudformation

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [12, !Cidr [!Ref VpcCidr, 256, 8]]
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Client}-vpc-${Region}-${Environment}-private-subnet-3'
        - Key: environment
          Value: !Ref Environment
        - Key: costCenter
          Value: !Ref CostCenter
        - Key: appService
          Value: !Ref Client
        - Key: deployedBy
          Value: cloudformation

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [20, !Cidr [!Ref VpcCidr, 256, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Client}-vpc-${Region}-${Environment}-public-subnet-1'
        - Key: environment
          Value: !Ref Environment
        - Key: costCenter
          Value: !Ref CostCenter
        - Key: appService
          Value: !Ref Client
        - Key: deployedBy
          Value: cloudformation

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [21, !Cidr [!Ref VpcCidr, 256, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Client}-vpc-${Region}-${Environment}-public-subnet-2'
        - Key: environment
          Value: !Ref Environment
        - Key: costCenter
          Value: !Ref CostCenter
        - Key: appService
          Value: !Ref Client
        - Key: deployedBy
          Value: cloudformation

  # NAT Gateway
  # NATGatewayEIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: AttachGateway
  #   Properties:
  #     Domain: vpc

  # NATGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NATGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-vpc-${Region}-${Environment}-nat'

  # # Route Tables
  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-vpc-${Region}-${Environment}-private-rt'

  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-vpc-${Region}-${Environment}-public-rt'

  # # Routes
  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NATGateway

  # PublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachGateway
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # # Route Table Associations
  # PrivateSubnetRouteTableAssociation1:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     RouteTableId: !Ref PrivateRouteTable

  # PrivateSubnetRouteTableAssociation2:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet2
  #     RouteTableId: !Ref PrivateRouteTable

  # PrivateSubnetRouteTableAssociation3:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet3
  #     RouteTableId: !Ref PrivateRouteTable

  # PublicSubnetRouteTableAssociation1:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnet1
  #     RouteTableId: !Ref PublicRouteTable

  # PublicSubnetRouteTableAssociation2:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnet2
  #     RouteTableId: !Ref PublicRouteTable

  # # VPC Endpoint for S3
  # S3VPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
  #     VpcEndpointType: Gateway
  #     RouteTableIds:
  #       - !Ref PrivateRouteTable
  #       - !Ref PublicRouteTable

  # ====================
  # ADDITIONAL VPC RESOURCES (COMMENTED OUT)
  # ====================
  # Uncomment and configure these resources as needed for your environment
  
  # # Security Groups
  # WebServerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for web servers
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-web-sg-${Environment}'
  
  # DatabaseSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for database
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 5432
  #         ToPort: 5432
  #         SourceSecurityGroupId: !Ref WebServerSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-db-sg-${Environment}'
  
  # # Network ACLs
  # PrivateNetworkAcl:
  #   Type: AWS::EC2::NetworkAcl
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-private-nacl-${Environment}'
  
  # PrivateInboundRule:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #     NetworkAclId: !Ref PrivateNetworkAcl
  #     RuleNumber: 100
  #     Protocol: -1
  #     RuleAction: allow
  #     CidrBlock: 10.0.0.0/16
  
  # # Additional VPC Endpoints
  # EC2VPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
  #     VpcEndpointType: Interface
  #     SubnetIds:
  #       - !Ref PrivateSubnet1
  #       - !Ref PrivateSubnet2
  #     SecurityGroupIds:
  #       - !Ref VPCEndpointSecurityGroup
  
  # VPCEndpointSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group for VPC endpoints
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #         CidrIp: !Ref VpcCidr
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-vpce-sg-${Environment}'
  
  # # Load Balancer Subnets (if different from public subnets)
  # LoadBalancerSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !Select [30, !Cidr [!Ref VpcCidr, 256, 8]]
  #     AvailabilityZone: !Select [0, !GetAZs '']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-lb-subnet-1-${Environment}'
  
  # LoadBalancerSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !Select [31, !Cidr [!Ref VpcCidr, 256, 8]]
  #     AvailabilityZone: !Select [1, !GetAZs '']
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Client}-lb-subnet-2-${Environment}'

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1-ID'

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2-ID'

  PrivateSubnet3Id:
    Description: Private Subnet 3 ID
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3-ID'

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1-ID'

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2-ID'

  # S3VPCEndpointId:
  #   Description: S3 VPC Endpoint ID
  #   Value: !Ref S3VPCEndpoint
  #   Export:
  #     Name: !Sub '${AWS::StackName}-S3VPCEndpoint-ID'
