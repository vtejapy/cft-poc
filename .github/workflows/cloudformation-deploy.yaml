name: CloudFormation Deployment

on:
  push:
    branches: [main]
    paths:
      - 'cloudformation/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

env:
  AWS_REGION: us-east-1
  TEMPLATES_BUCKET: cloudformation-templates-prod-${{ github.run_id }}
  STACK_NAME: infrastructure-prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation templates
        run: |
          echo "🔍 Validating CloudFormation templates..."
          
          # Validate all templates
          for template in cloudformation/templates/*.yaml cloudformation/main.yaml; do
            if [[ -f "$template" ]]; then
              echo "Validating $template..."
              aws cloudformation validate-template --template-body file://$template
            fi
          done
          
          echo "✅ All templates are valid!"

  upload-templates:
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action != 'destroy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 bucket for templates
        run: |
          # Get AWS Account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Create bucket if it doesn't exist
          if ! aws s3 ls "s3://${{ env.TEMPLATES_BUCKET }}" 2>/dev/null; then
            aws s3 mb s3://${{ env.TEMPLATES_BUCKET }} --region ${{ env.AWS_REGION }}
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket ${{ env.TEMPLATES_BUCKET }} \
              --versioning-configuration Status=Enabled
            
            # Disable block public access to allow CloudFormation access
            aws s3api put-public-access-block \
              --bucket ${{ env.TEMPLATES_BUCKET }} \
              --public-access-block-configuration \
                BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
            
            # Set bucket policy to allow CloudFormation access
            aws s3api put-bucket-policy \
              --bucket ${{ env.TEMPLATES_BUCKET }} \
              --policy "{
                \"Version\": \"2012-10-17\",
                \"Statement\": [
                  {
                    \"Effect\": \"Allow\",
                    \"Principal\": \"*\",
                    \"Action\": \"s3:GetObject\",
                    \"Resource\": \"arn:aws:s3:::${{ env.TEMPLATES_BUCKET }}/*\"
                  },
                  {
                    \"Effect\": \"Allow\",
                    \"Principal\": {
                      \"AWS\": \"arn:aws:iam::${AWS_ACCOUNT_ID}:root\"
                    },
                    \"Action\": [
                      \"s3:GetObject\",
                      \"s3:PutObject\",
                      \"s3:DeleteObject\",
                      \"s3:ListBucket\"
                    ],
                    \"Resource\": [
                      \"arn:aws:s3:::${{ env.TEMPLATES_BUCKET }}\",
                      \"arn:aws:s3:::${{ env.TEMPLATES_BUCKET }}/*\"
                    ]
                  }
                ]
              }"
          fi

      - name: Upload CloudFormation templates
        run: |
          echo "📤 Uploading templates to S3..."
          
          # Upload templates
          aws s3 sync cloudformation/templates/ s3://${{ env.TEMPLATES_BUCKET }}/templates/ --delete
          
          # Upload main template
          aws s3 cp cloudformation/main.yaml s3://${{ env.TEMPLATES_BUCKET }}/main.yaml
          
          # Wait for S3 consistency
          sleep 3
          
          echo "✅ Templates uploaded successfully!"

  deploy:
    runs-on: ubuntu-latest
    needs: [validate, upload-templates]
    if: github.event.inputs.action != 'destroy'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        run: |
          echo "🚀 Deploying CloudFormation stack..."
          
          # Check if stack exists and its status
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} 2>/dev/null; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].StackStatus' --output text)
            echo "📋 Current stack status: $STACK_STATUS"
            
            if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
              echo "⚠️  Stack is in ROLLBACK_COMPLETE state, deleting it first..."
              aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
              echo "⏳ Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
              echo "✅ Stack deleted successfully!"
            fi
          fi
          
          # Convert JSON parameters to parameter-overrides format
          PARAMS=$(cat cloudformation/parameters/prod.json | jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' | paste -sd ' ')
          
          echo "📋 Parameters being passed:"
          echo "$PARAMS TemplatesBucketName=${{ env.TEMPLATES_BUCKET }}"
          
          if aws cloudformation deploy \
            --template-file cloudformation/main.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides $PARAMS TemplatesBucketName=${{ env.TEMPLATES_BUCKET }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset; then
            echo "✅ Stack deployment completed successfully!"
          else
            echo "❌ Stack deployment failed!"
            echo "📋 Getting stack events for debugging..."
            aws cloudformation describe-stack-events --stack-name ${{ env.STACK_NAME }} --max-items 20 --output table || true
            echo "📋 Getting stack status..."
            aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].{Status:StackStatus,Reason:StackStatusReason}' --output table || true
            exit 1
          fi

      - name: Display stack outputs
        run: |
          echo "📄 Stack Outputs:"
          echo "=================="
          aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs' \
            --output table

  destroy:
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.action == 'destroy'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Confirm destruction
        run: |
          echo "⚠️  WARNING: You are about to destroy the following stack:"
          echo "Stack Name: ${{ env.STACK_NAME }}"
          echo "Environment: production"
          echo ""
          echo "This action cannot be undone!"

      - name: Delete CloudFormation stack
        run: |
          echo "🗑️  Deleting CloudFormation stack..."
          
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} 2>/dev/null; then
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            
            echo "⏳ Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
            
            echo "✅ Stack deleted successfully!"
          else
            echo "ℹ️  Stack does not exist, nothing to delete."
          fi

  cleanup:
    runs-on: ubuntu-latest
    needs: [upload-templates, deploy, destroy]
    if: always() && needs.upload-templates.result == 'success'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up templates bucket
        run: |
          echo "🧹 Cleaning up templates bucket..."
          echo "📋 Bucket to cleanup: ${{ env.TEMPLATES_BUCKET }}"
          
          # Check if bucket exists before cleanup
          if aws s3 ls s3://${{ env.TEMPLATES_BUCKET }} 2>/dev/null; then
            echo "🗑️  Removing all objects from bucket..."
            aws s3 rm s3://${{ env.TEMPLATES_BUCKET }} --recursive || true
            
            echo "🗑️  Deleting bucket..."
            aws s3 rb s3://${{ env.TEMPLATES_BUCKET }} || true
            
            echo "✅ Templates bucket cleanup completed!"
          else
            echo "ℹ️  Templates bucket not found or already cleaned up"
          fi